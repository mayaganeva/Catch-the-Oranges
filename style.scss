@import url('https://fonts.googleapis.com/css2?family=Maiden+Orange&display=swap');
:root {
	--font: 400 4.5cqi 'Maiden Orange', serif;
	
	--fz-s: 	4.5cqi;
	--fz-m: 	5.5cqi;
	--fz-l: 	9cqi;
	--fz-xl: 	12cqi;
	
	--fruit-r: 	5cqi;

	--primary-darkest: 	#552b0399;
	--primary-mid: 		darkorange;
	--primary: 			orange;
	--primary-o: 		#ef8c0b80;
	--primary-light-o: 	#7c3a03cc;
	
	--secondary-dark: 	maroon;
	--secondary: 		orangered;
	--secondary-o: 		#ff4400cc;
	--secondary-light: 	hsl(24, 100%, 50%);
	
	--tertiary-dark: 	darkgreen;
	--tertiary-mid: 	green;
	--tertiary: 		limegreen;
	
	--n-darkest: 		#191919;
	--n-darkest-o: 		#191919aa;
	--n-lightest-o:		#fffa;

	--text-shadow:  1cqi 1cqi 3cqi var(--n-darkest-o);
	--button-shadow: 1cqi 1cqi 3cqi var(--primary-light-o);
	--fruit-shadow: .25cqi .75cqi 2cqi var(--primary-darkest);

}
*, ::before, ::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
body {
	background-color: var(--n-darkest);
	color: #fff;
	display: grid;
	font: var(--font);
	font-style: normal;
	min-height: 100vh;
	place-items: center;
}

.gameContainer {
	aspect-ratio: 1;
	background-image: url("background.jpg");
	background-size: cover;
	background-position: 50% 0%;
	background-position-x: 50%;
	background-position-y: 0%;
	border-radius: 16px;
	container-type: inline-size;
	counter-reset: score;
	// You can't use counter reset on a container, that's why we wrap everything inside the game in a form
	outline: 2px solid #fff;
	overflow: hidden;
	position: relative;
	transition: all 1s;
	width: 80vmin;

	&:has(#game:checked) {
		animation: treeShake .1s 1.5s ease-in-out alternate 8;
		background-size: 125%;
		background-position-y: 100%;
		// If worries about performance, the background would be a different element
		// Separated background-position-x because one is translated and the other animated

		@keyframes treeShake {
			from { background-position-x: 45%; }
			to { background-position-x: 55%; }
		}
	}
}

form {
	counter-reset: score oranges apples;
}

input[name="screen"] {
	display: none;
	// Putting display: none; removes it from the DOM, but doesn't remove it from the CSS Object Model, so CSS treats them just as if they're in the DOM

	&#start:checked ~ .screen-start,
	&#info:checked ~ .screen-info,
	&#game:checked ~ .screen-game,
	&#end:checked ~ .screen-end {
		opacity: 1;
		pointer-events: revert;
	}
	
	&#info:checked ~ .screen-info:has(.button-label:checked) {
		opacity: 0;
	}

	&#game:checked ~ .screen-game :where(.orange, .apple) {
		animation: drop 2.5s var(--delay, 0s) ease-in forwards var(--playState, running);

		@keyframes drop {
			to { translate: var(--translateX, 10cqi) 60cqi; }
		}
	}

	&#game:checked ~ .screen-game .apple {
		animation-duration: 3s;
	}

	&#game:checked ~ .screen-game .gui {
		animation: gui .5s 29.5s forwards;

		@keyframes gui {
			to { translate: 0 100%; }
		}

		.timer span::before {
			animation: countdown 100s -70s step-end;
			// With a negative delay, the animation starts as if it were 70s in, so directly to 2 1
			// We want an animation that's 30s long, so we make it 100s long with a -70s delay which leaves 30s duration
		}

		.timer span::after {
			animation: countdown 10s 3 step-end;
		}
	}

	&#game:checked ~ .screen-end {
		animation: screenEnd .4s 29.5s forwards;
		backdrop-filter: blur(4px);

		@keyframes screenEnd {
			to {
				opacity: 1;
				pointer-events: revert;
			}
		}
	}
}

.screen {
	align-content: center;
	display: grid;
	gap: 5cqi;
	inset: 0;
	opacity: 0;
	position: absolute;
	place-items: center;
	pointer-events: none;
	transition: opacity 400ms;

	&-start {
		.orange:first-child {
			translate: 23cqi -27cqi;
			scale: .9;
			animation: orangeDance 1s infinite alternate ease-in-out;
		}
		.orange:nth-child(2) {
			translate: -22cqi -12cqi;
			rotate: -20deg;
			animation: orangeDance 1s .6s infinite alternate ease-in-out;
		}
		.orange:nth-child(n + 3) {
			animation: orangeDrop .4s 1s ease-in;
			translate: var(--translateX) -60cqi;
		}
		.orange:nth-child(3) {
			--translateX: 10cqi;
		}
		.orange:nth-child(4) {
			--translateX: -35cqi;
			animation-delay: 1.5s;
		}
		.orange:nth-child(5) {
			--translateX: 5cqi;
			animation-delay: 2.5s;
		}
		@keyframes orangeDance {
			from { rotate: 25deg; }
			to { rotate: -23deg; }
		}
	}
	&-info {
		background-color: var(--n-darkest-o);
		padding: 10cqi;
	}
	&-info p {
		font-size: var(--fz-s);
	}
	&-end {
		background-color: var(--n-lightest-o);
		color: var(--n-darkest);
		font-size: var(--fz-m);
		text-align: center;

		p:first-child {
			font-size: var(--fz-xl);
		}

		p:last-child {
			font-size: var(--fz-l);
		}

		p:first-child,
		p.bad {
			margin-bottom: 2cqi;
		}

		span {
			color: var(--color);
		}

		.good {
			--color: var(--primary-mid);

			.result::after {
				content: counter(oranges);
			}
		}

		.bad {
			--color: var(--tertiary-dark);

			.result::after {
				content: counter(apples);
			}
		}
		
		.total {
			--color: var(--secondary);

			.result::after {
				content: counter(score);
			}
		}
	}
}

h1 {
	font-size: var(--fz-xl);
	letter-spacing: .1cqi;
	text-shadow: var(--text-shadow);
	// Use the same units thatyou use on the game container for everything else
	transform: skewY(-5deg);
	user-select: none;
}

.buttons {
	display: flex;
	gap: 5cqi;
}

.button-label {
	border: max(.5cqi, 2px) solid var(--primary-o);
	border-radius: 2cqi;
	box-shadow: var(--button-shadow);
	// He wouldnt set it at just .5cqi so the border doesn't become too thin
	// 1cqi is 1% of the container width
	font-family: var(--ff-base);
	font-size: var(--fz-m);
	background-color: var(--primary-o);
	color: #fff;
	padding: 4cqi 8cqi;
	scale: 1;
	transform: skewY(-5deg);
	transition: scale 200ms;
	user-select: none;
}

.button-label:hover {
	cursor: pointer;
	scale: 1.1;
}

.screen-info .button-label {
	padding: 3cqi 7cqi;
}

.screen-end .button-label {
	background-color: var(--secondary-o);
	border-color: var(--secondary);
}

.oranges,
.apples {
	position: absolute;
	inset: 50%;
	// In the middle of the screen
}
.orange, .apple {
	appearance: none;
	// Resets appearance of radio to an empty div
	box-shadow: var(--fruit-shadow);
	position: absolute;

	&::before, &::after {
		aspect-ratio: 1;
		background-image: radial-gradient(
			at top left,
			var(--tertiary-mid),
			var(--tertiary)
		);
		border-radius: 0 100%;
		content: '';
		left: 50%;
		top: 10%;
		transform-origin: top left;
		position: absolute;
		rotate: 170deg;
		width: 40%;
	}

	&::after {
		rotate: -90deg;
	}

	&[type="radio"] {
		rotate: var(--angle);
		scale: var(--scale);
		translate: var(--translateX) -60cqi;
		transition: opacity 200ms;

		&:hover {
			cursor: pointer;
		}

		#game:checked ~ .screen-game &:checked {
			--playState: paused;
			// Firefox doesn't like when you change custom properties? Check that
			background-color: #fff;
			background-image: unset;
			box-shadow: unset;
			counter-increment: score oranges;
			-webkit-mask: url('pop.svg') no-repeat center;
			mask: url('pop.svg') no-repeat center;
			-webkit-mask-size: contain;
			// Preload the images!
			mask-size: contain;
			opacity: 0;
			transform: translateY(-25%);
			// Happens after the original transform is finished
		}

		&:checked::before,
		&:checked::after {
			background-image: revert;
		}
	}
}
.orange {
	background-image: radial-gradient(
		circle at top,
		var(--primary),
		var(--secondary-light),
		var(--secondary-dark)
		);
	border-radius: 50%;
	inset: calc(-1 * var(--fruit-r));
	// It's going outside, outset of 5cqi, so total width is 10cqi, 5 in each direction

	@for $o from 1 through 30 {
		&[type="radio"]:nth-child(#{$o}) {
			// Sass variables are "meant" to be used as value only; In order to use them elsewhere, we need to use interpolation
			--angle: #{random(60) - 30}deg;
			// You HAVE TO use interpolation when using custom properties with Sass
			--delay: #{$o + 2}s;
			--scale: #{random(100) / 500 + 0.8};
			// 100 / 100 gives a number between 0 1 and 100 / 500 gives a number from 0 to 0.2 + 0.8 to get 1
			--translateX: #{random(80) - 40}cqi;
			// Getting a random number between -40 to 40
		}
	}
}

.apple {
	background-image: radial-gradient(
		circle at top,
		var(--tertiary),
		var(--tertiary-dark)
		);
	border-radius: 52% 48% 48% 52% / 28% 31% 69% 72%;
	inset: -5cqi;

	@for $o from 1 through 20 {
		&[type="radio"]:nth-child(#{$o}) {
			--angle: #{random(60) - 30}deg;
			--delay: #{$o * 1.25 + 3}s;
			--scale: #{random(100) / 500 + 0.8};
			--translateX: #{random(80) - 40}cqi;
		}
	}
}

.gui {
	bottom: 0;
	display: flex;
	font-size: var(--fz-l);
	justify-content: space-between;
	padding: 1cqi 3cqi;
	pointer-events: none;
	position: absolute;
	text-shadow: var(--text-shadow);
	user-select: none;
	width: 100%;
}

.timer span {
	&::before {
		content: '2';
		// You can't set the content as a number, it must be a string
	}

	&::after {
		content: '6';
	}

	@keyframes countdown {
		0% { content: '9'; }
		10% { content: '8'; }
		20% { content: '7'; }
		30% { content: '6'; }
		40% { content: '5'; }
		50% { content: '4'; }
		60% { content: '3'; }
		70% { content: '2'; }
		80% { content: '1'; }
		90% { content: '0'; }
	}
}

.score::after {
	content: counter(score);
}

// pointer-events: none;
// opacity: 0;
// works just like
// display: none;
// for our purposes - hide the screen and prevent users from clicking on buttons